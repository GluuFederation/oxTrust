{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id": "/",
    "title": "oxauth-config.xml",
    "type": "object",
    "additionalProperties": true,
    "properties": {
        "sessionAsJwt": {
            "id": "sessionAsJwt",
            "description": "Experimental feature. Do not use in production!",
            "type": "boolean"
        },
        "issuer": {
            "id": "issuer",
            "description": "URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.",
            "title": "Issuer",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "baseEndpoint": {
            "id": "baseEndpoint",
            "description": "Base URL of the Endpoints.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "authorizationEndpoint": {
            "id": "authorizationEndpoint",
            "description": "The URL of the Authorization Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "tokenEndpoint": {
            "id": "tokenEndpoint",
            "description": "The URL of the Token Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "tokenRevocationEndpoint": {
            "id": "tokenRevocationEndpoint",
            "description": "The URL of the Token (access_token or refresh_token) Revocation Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "userInfoEndpoint": {
            "id": "userInfoEndpoint",
            "description": "The URL of the User Info Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "clientInfoEndpoint": {
            "id": "clientInfoEndpoint",
            "description": "The URL of the Client Info Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "checkSessionIFrame": {
            "id": "checkSessionIFrame",
            "description": "URL of an OP iframe that supports cross-origin communications for session state information with the RP Client, using the HTML5 postMessage API.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "endSessionEndpoint": {
            "id": "endSessionEndpoint",
            "description": "URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "jwksUri": {
            "id": "jwksUri",
            "description": "URL of the OP's JSON Web Key Set (JWK) document. This contains the signing key(s) the RP uses to validate signatures from the OP.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "registrationEndpoint": {
            "id": "registrationEndpoint",
            "description": "URL of the Registration Enpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "openIdDiscoveryEndpoint": {
            "id": "openIdDiscoveryEndpoint",
            "description": "URL for the Discovery Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "openIdConfigurationEndpoint": {
            "id": "openIdConfigurationEndpoint",
            "description": "URL for the Open ID Connect Configuration Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "idGenerationEndpoint": {
            "id": "idGenerationEndpoint",
            "description": "URL for the ID Generation Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "introspectionEndpoint": {
            "id": "introspectionEndpoint",
            "description": "URL for the Introspection Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "deviceAuthzEndpoint": {
            "id": "deviceAuthzEndpoint",
            "description": "URL for device authorization requests.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "umaConfigurationEndpoint": {
            "id": "umaConfigurationEndpoint",
            "description": "URL for the UMA Configuration Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "sectorIdentifierEndpoint": {
            "id": "sectorIdentifierEndpoint",
            "description": "URL for the Sector Identifier Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "oxElevenGenerateKeyEndpoint": {
            "id": "oxElevenGenerateKeyEndpoint",
            "description": "URL for the oxEleven Generate Key Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "oxElevenSignEndpoint": {
            "id": "oxElevenSignEndpoint",
            "description": "URL for the oxEleven Sign Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "oxElevenVerifySignatureEndpoint": {
            "id": "oxElevenVerifySignatureEndpoint",
            "description": "URL for the oxEleven Verify Signature Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "oxElevenDeleteKeyEndpoint": {
            "id": "oxElevenDeleteKeyEndpoint",
            "description": "URL for the oxEleven Delete Key Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "oxElevenJwksEndpoint": {
            "id": "oxElevenJwksEndpoint",
            "description": "URL for the oxEleven JWKS Endpoint.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "openidSubAttribute": {
            "id": "openidSubAttribute",
            "description": "LDAP attribute used for the sub claim.",
            "type": "string",
            "minLength": 1
        },
        "responseTypesSupported": {
            "id": "responseTypesSupported",
            "description": "A list of the OAuth 2.0 response_type values that this OP supports.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "array",
                "format": "select",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                    "type": "string",
                    "enum": [
                        "code",
                        "token",
                        "id_token"
                    ]
                }
            }
        },
        "responseModesSupported": {
            "id": "responseModesSupported",
            "description": "A list of the OAuth 2.0 Response Mode values that this OP supports.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "query",
                    "fragment",
                    "form_post"
                ]
            }
        },
        "grantTypesSupported": {
            "id": "grantTypesSupported",
            "description": "A list of the OAuth 2.0 Grant Type values that this OP supports.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "authorization_code",
                    "implicit",
                    "password",
                    "client_credentials",
                    "refresh_token",
                    "urn:ietf:params:oauth:grant-type:uma-ticket",
                    "urn:openid:params:grant-type:ciba",
                    "urn:ietf:params:oauth:grant-type:device_code"
                ]
            }
        },
        "dynamicGrantTypeDefault": {
            "id": "dynamicGrantTypeDefault",
            "description": "A list of the OAuth 2.0 Grant Type values that it's possible to set via client registration API.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "authorization_code",
                    "implicit",
                    "password",
                    "client_credentials",
                    "refresh_token",
                    "urn:ietf:params:oauth:grant-type:uma-ticket",
                    "urn:openid:params:grant-type:ciba",
                    "urn:ietf:params:oauth:grant-type:device_code"
                ]
            }
        },
        "softwareStatementValidationType": {
            "id": "softwareStatementValidationType",
            "description": "Specifies validation type for software statement during Dynamic Client Registration. `script` - validate with help of Dynamic Client Registration custom script, `jwks_uri` - validate by JWKS fetched by uri where jwks_uri is specified as claim of software statement by name defined in softwareStatementValidationClaimName. `jwks` - validate by JWKS which are taken from sofware statement claims. Not recommended. Claim name specified by softwareStatementValidationClaimName. `none` - validation of software statement is skipped.",
            "type": "string",
            "enum": [
                "script",
                "jwks",
                "jwks_uri",
                "none"
            ]
        },
        "softwareStatementValidationClaimName": {
            "id": "softwareStatementValidationClaimName",
            "description": "Specifies claim name within software statement. Used with softwareStatementValidationType=jwks_uri or softwareStatementValidationType=jwks.",
            "type": "string"
        },
        "subjectTypesSupported": {
            "id": "subjectTypesSupported",
            "description": "A list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "public",
                    "pairwise"
                ]
            }
        },
        "defaultSubjectType": {
            "id": "defaultSubjectType",
            "description": "Default Subject Type used for Dynamic Client Registration.",
            "type": "string",
            "enum": [
                "public",
                "pairwise"
            ]
        },
        "userInfoSigningAlgValuesSupported": {
            "id": "userInfoSigningAlgValuesSupported",
            "description": "A list of the JWS signing algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "HS256",
                    "HS384",
                    "HS512",
                    "RS256",
                    "RS384",
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512"
                ]
            }
        },
        "userInfoEncryptionAlgValuesSupported": {
            "id": "userInfoEncryptionAlgValuesSupported",
            "description": "A list of the JWE encryption algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "RSA1_5",
                    "RSA-OAEP",
                    "A128KW",
                    "A256KW"
                ]
            }
        },
        "userInfoEncryptionEncValuesSupported": {
            "id": "userInfoEncryptionEncValuesSupported",
            "description": "A list of the JWE encryption algorithms (enc values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "A128CBC+HS256",
                    "A256CBC+HS512",
                    "A128GCM",
                    "A256GCM"
                ]
            }
        },
        "idTokenSigningAlgValuesSupported": {
            "id": "idTokenSigningAlgValuesSupported",
            "description": "A list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "none",
                    "HS256",
                    "HS384",
                    "HS512",
                    "RS256",
                    "RS384",
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512"
                ]
            }
        },
        "idTokenEncryptionAlgValuesSupported": {
            "id": "idTokenEncryptionAlgValuesSupported",
            "description": "A list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "RSA1_5",
                    "RSA-OAEP",
                    "A128KW",
                    "A256KW"
                ]
            }
        },
        "idTokenEncryptionEncValuesSupported": {
            "id": "idTokenEncryptionEncValuesSupported",
            "description": "A list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "A128CBC+HS256",
                    "A256CBC+HS512",
                    "A128GCM",
                    "A256GCM"
                ]
            }
        },
        "requestObjectSigningAlgValuesSupported": {
            "id": "requestObjectSigningAlgValuesSupported",
            "description": "A list of the JWS signing algorithms (alg values) supported by the OP for Request Objects.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "none",
                    "HS256",
                    "HS384",
                    "HS512",
                    "RS256",
                    "RS384",
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512"
                ]
            }
        },
        "requestObjectEncryptionAlgValuesSupported": {
            "id": "requestObjectEncryptionAlgValuesSupported",
            "description": "A list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "RSA1_5",
                    "RSA-OAEP",
                    "A128KW",
                    "A256KW"
                ]
            }
        },
        "requestObjectEncryptionEncValuesSupported": {
            "id": "requestObjectEncryptionEncValuesSupported",
            "description": "A list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "A128CBC+HS256",
                    "A256CBC+HS512",
                    "A128GCM",
                    "A256GCM"
                ]
            }
        },
        "tokenEndpointAuthMethodsSupported": {
            "id": "tokenEndpointAuthMethodsSupported",
            "description": "A list of Client Authentication methods supported by this Token Endpoint.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "client_secret_basic",
                    "client_secret_post",
                    "client_secret_jwt",
                    "private_key_jwt"
                ]
            }
        },
        "tokenEndpointAuthSigningAlgValuesSupported": {
            "id": "tokenEndpointAuthSigningAlgValuesSupported",
            "description": "A list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "HS256",
                    "HS384",
                    "HS512",
                    "RS256",
                    "RS384",
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512"
                ]
            }
        },
        "dynamicRegistrationCustomAttributes": {
            "id": "dynamicRegistrationCustomAttributes",
            "description": "Custom attributes for the Dynamic registration.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "displayValuesSupported": {
            "id": "displayValuesSupported",
            "description": "A list of the display parameter values that the OpenID Provider supports.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "page",
                    "popup"
                ]
            }
        },
        "claimTypesSupported": {
            "id": "claimTypesSupported",
            "description": "A list of the Claim Types that the OpenID Provider supports.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "normal"
                ]
            }
        },
        "serviceDocumentation": {
            "id": "serviceDocumentation",
            "description": "URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "claimsLocalesSupported": {
            "id": "claimsLocalesSupported",
            "description": "Languages and scripts supported for values in Claims being returned.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "idTokenTokenBindingCnfValuesSupported": {
            "id": "idTokenTokenBindingCnfValuesSupported",
            "description": "Array containing a list of the JWT Confirmation Method member names supported by the OP for Token Binding of ID Tokens. The presence of this parameter indicates that the OpenID Provider supports Token Binding of ID Tokens. If omitted, the default is that the OpenID Provider does not support Token Binding of ID Tokens.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "uiLocalesSupported": {
            "id": "uiLocalesSupported",
            "description": "Languages and scripts supported for the user interface.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "persistIdTokenInLdap": {
            "id": "persistIdTokenInLdap",
            "description": "Specifies whether to persist id_token into LDAP (otherwise saves into cache).",
            "type": "boolean"
        },
        "persistRefreshTokenInLdap": {
            "id": "persistRefreshTokenInLdap",
            "description": "Specifies whether to persist refresh_token into LDAP (otherwise saves into cache).",
            "type": "boolean"
        },
        "claimsParameterSupported": {
            "id": "claimsParameterSupported",
            "description": "Specifies whether the OP supports use of the claims parameter.",
            "type": "boolean"
        },
        "requestParameterSupported": {
            "id": "requestParameterSupported",
            "description": "Boolean value specifying whether the OP supports use of the request parameter.",
            "type": "boolean"
        },
        "requestUriParameterSupported": {
            "id": "requestUriParameterSupported",
            "description": "Boolean value specifying whether the OP supports use of the request_uri parameter.",
            "type": "boolean"
        },
        "requireRequestUriRegistration": {
            "id": "requireRequestUriRegistration",
            "description": "Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.",
            "type": "boolean"
        },
        "opPolicyUri": {
            "id": "opPolicyUri",
            "description": "URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "opTosUri": {
            "id": "opTosUri",
            "description": "URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "authorizationCodeLifetime": {
            "id": "authorizationCodeLifetime",
            "description": "The lifetime of the Authorization Code.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "refreshTokenLifetime": {
            "id": "refreshTokenLifetime",
            "description": "The lifetime of the Refresh Token.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "idTokenLifetime": {
            "id": "idTokenLifetime",
            "description": "The lifetime of the ID Token.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "accessTokenLifetime": {
            "id": "accessTokenLifetime",
            "description": "The lifetime of the short lived Access Token.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "umaRptLifetime": {
            "id": "umaRptLifetime",
            "description": "UMA RPT lifetime",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "umaTicketLifetime": {
            "id": "umaTicketLifetime",
            "description": "UMA ticket lifetime",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
         },
        "umaPctLifetime": {
            "id": "umaPctLifetime",
            "description": "UMA PCT lifetime",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "umaResourceLifetime": {
            "id": "umaResourceLifetime",
            "description": "UMA Resource lifetime",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "umaAddScopesAutomatically": {
            "id": "umaAddScopesAutomatically",
            "description": "Add UMA scopes automatically if it is not registered yet",
            "type": "boolean"
        },
        "umaValidateClaimToken": {
            "id": "umaValidateClaimToken",
            "description": "Validate claim_token as id_token assuming it is issued by local idp.",
            "type": "boolean"
        },
        "umaGrantAccessIfNoPolicies": {
            "id": "umaGrantAccessIfNoPolicies",
            "description": "Specify whether to grant access to resources if there is no any policies associated with scopes.",
            "type": "boolean"
        },
        "umaRestrictResourceToAssociatedClient": {
            "id": "umaRestrictResourceToAssociatedClient",
            "description": "Restrict access to resource by associated client.",
            "type": "boolean"
        },
        "umaKeepClientDuringResourceSetRegistration": {
            "id": "umaKeepClientDuringResourceSetRegistration",
            "description": "Save client information during resource registration",
            "type": "boolean"
        },
        "umaRptAsJwt": {
            "id": "umaRptAsJwt",
            "description": "Issue RPT as JWT or as random string.",
            "type": "boolean"
        },
        "expirationNotificatorEnabled": {
            "id": "expirationNotificatorEnabled",
            "description": "Boolean value specifying whether expiration notificator is enabled (used to identify expiration for persistence that support TTL, like Couchbase). Default value is true",
            "type": "boolean"
        },
        "cleanServiceInterval": {
            "id": "cleanServiceInterval",
            "description": "Time interval for the Clean Service in seconds.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "cleanServiceBatchChunkSize": {
            "id": "cleanServiceBatchChunkSize",
            "description": "Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "keyRegenerationEnabled": {
            "id": "keyRegenerationEnabled",
            "description": "Boolean value specifying whether to regenerate keys.",
            "type": "boolean"
        },
        "keyRegenerationInterval": {
            "id": "keyRegenerationInterval",
            "description": "The interval for key regeneration in hours.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "defaultSignatureAlgorithm": {
            "id": "defaultSignatureAlgorithm",
            "description": "The default signature algorithm to sign ID Tokens.",
            "type": "string",
            "enum": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512",
                "ES256",
                "ES384",
                "ES512"
            ]
        },
        "oxOpenIdConnectVersion": {
            "id": "oxOpenIdConnectVersion",
            "description": "OpenID Connect Version.",
            "type": "string",
            "minLength": 1
        },
        "oxId": {
            "id": "oxId",
            "description": "URL for the Inum generator Service.",
            "type": "string",
            "format": "url",
            "minLength": 1
        },
        "dynamicRegistrationEnabled": {
            "id": "dynamicRegistrationEnabled",
            "description": "Boolean value specifying whether to enable Dynamic Registration.",
            "type": "boolean"
        },
        "dynamicRegistrationPasswordGrantTypeEnabled": {
            "id": "dynamicRegistrationPasswordGrantTypeEnabled",
            "description": "Boolean value specifying whether to enable Password Grant Type during Dynamic Registration.",
            "type": "boolean"
        },
        "dynamicRegistrationAllowedPasswordGrantScopes": {
            "id": "dynamicRegistrationAllowedPasswordGrantScopes",
            "description": "Specifies allowed scopes during registration if client has grant_type=password. Otherwise ignored. It's also ignored when list is empty.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "dynamicRegistrationExpirationTime": {
            "id": "dynamicRegistrationExpirationTime",
            "description": "Expiration time in seconds for clients created with dynamic registration, -1 means never expire.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "dynamicRegistrationPersistClientAuthorizations": {
            "id": "dynamicRegistrationPersistClientAuthorizations",
            "description": "Boolean value specifying whether to persist client authorizations.",
            "type": "boolean"
        },
        "trustedClientEnabled": {
            "id": "trustedClientEnabled",
            "description": "Boolean value specifying whether a client is trusted and no authorization is required.",
            "type": "boolean"
        },
        "dynamicRegistrationScopesParamEnabled": {
            "id": "dynamicRegistrationScopesParamEnabled",
            "description": "Boolean value specifying whether to enable scopes parameter in dynamic registration.",
            "type": "boolean"
        },
        "dynamicRegistrationCustomObjectClass": {
            "id": "dynamicRegistrationCustomObjectClass",
            "description": "LDAP custom object class for dynamic registration.",
            "type": "string",
            "minLength": 1
        },
        "returnClientSecretOnRead": {
            "id": "returnClientSecretOnRead",
            "description": "Boolean value specifying whether a client_secret is returned on client GET or PUT. Set to false by default which means to not return secret.",
            "type": "boolean"
        },
        "introspectionScriptBackwardCompatibility": {
            "id": "introspectionScriptBackwardCompatibility",
            "description": "Boolean value specifying whether switch off client's introspection scripts (true value) and run all scripts that exists on server. Default value is false.",
            "type": "boolean"
        },
        "introspectionResponseScopesBackwardCompatibility": {
            "id": "introspectionResponseScopesBackwardCompatibility",
            "description":"When false, introspection endpoint returns scopes as a space-separated string, otherwise as JSON array.",
            "type": "boolean"
        },
        "introspectionAccessTokenMustHaveUmaProtectionScope": {
            "id": "introspectionAccessTokenMustHaveUmaProtectionScope",
            "description":"Reject introspection requests if access_token in Authorization header does not have uma_protection scope.",
            "type": "boolean"
        },
        "personCustomObjectClassList": {
            "id": "personCustomObjectClassList",
            "description": "LDAP custom object class list for dynamic person enrollment.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "authenticationFiltersEnabled": {
            "id": "authenticationFiltersEnabled",
            "description": "Boolean value specifying whether to enable user authentication filters.",
            "type": "boolean"
        },
        "clientAuthenticationFiltersEnabled": {
            "id": "clientAuthenticationFiltersEnabled",
            "description": "Boolean value specifying whether to enable client authentication filters.",
            "type": "boolean"
        },
        "clientRegDefaultToCodeFlowWithRefresh": {
            "id": "clientRegDefaultToCodeFlowWithRefresh",
            "description": "Boolean value specifying whether to add Authorization Code Flow with Refresh grant during client registration.",
            "type": "boolean"
        },
        "refreshTokenExtendLifetimeOnRotation": {
            "id": "refreshTokenExtendLifetimeOnRotation",
            "description": "Boolean value specifying whether to extend refresh token lifetime on rotation.",
            "type": "boolean"
        },
        "authenticationFilters": {
            "id": "authenticationFilters",
            "description": "User authentication filters.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": false,
            "additionalItems": true,
            "items": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                    "filter": {
                        "id": "filter",
                        "type": "string",
                        "minLength": 1
                    },
                    "bind": {
                        "id": "bind",
                        "type": "boolean"
                    },
                    "bindPasswordAttribute": {
                        "id": "bindPasswordAttribute",
                        "type": "string",
                        "minLength": 1
                    },
                    "baseDn": {
                        "id": "baseDn",
                        "type": "string",
                        "minLength": 1
                    }
                }
            }
        },
        "clientAuthenticationFilters": {
            "id": "clientAuthenticationFilters",
            "description": "Client authentication filters.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": false,
            "additionalItems": true,
            "items": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                    "filter": {
                        "id": "filter",
                        "type": "string",
                        "minLength": 1
                    },
                    "bind": {
                        "id": "bind",
                        "type": "string",
                        "minLength": 1
                    },
                    "bindPasswordAttribute": {
                        "id": "bindPasswordAttribute",
                        "type": "string",
                        "minLength": 1
                    },
                    "baseDn": {
                        "id": "baseDn",
                        "type": "string",
                        "minLength": 1
                    }
                }
            }
        },
        "sessionIdUnusedLifetime": {
            "id": "sessionIdUnusedLifetime",
            "description": "The lifetime for unused session states.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "sessionIdUnauthenticatedUnusedLifetime": {
            "id": "sessionIdUnauthenticatedUnusedLifetime",
            "description": "The lifetime for unused unauthenticated session states.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "sessionIdLifetime": {
            "id": "sessionIdLifetime",
            "description": "The lifetime of session id in seconds. If 0 or -1 then expiration is not set. `session_id` cookie expires when browser session ends.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": -1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "changeSessionIdOnAuthentication": {
            "id": "changeSessionIdOnAuthentication",
            "description": "Boolean value specifying whether change session_id on authentication. Default value is true.",
            "type": "boolean"
        },
        "sessionIdRequestParameterEnabled": {
            "id": "sessionIdRequestParameterEnabled",
            "description": "Boolean value specifying whether to enable session_id HTTP request parameter.",
            "type": "boolean"
        },
        "sessionIdPersistOnPromptNone": {
            "id": "sessionIdPersistOnPromptNone",
            "description": "Boolean value specifying whether to persist session ID on prompt none.",
            "type": "boolean"
        },
        "fapiCompatibility": {
            "id": "fapiCompatibility",
            "description": "Boolean value specifying whether turn on FAPI compatibility mode. If true AS behaves in more strict mode.",
            "type": "boolean"
         },
         "consentGatheringScriptBackwardCompatibility": {
             "id": "consentGatheringScriptBackwardCompatibility",
             "description": "Boolean value specifying whether turn on Consent Gathering Script backward compatibility mode. If true AS will pick up script with higher level globally. If false (default) AS will pick up script based on client configuration.",
             "type": "boolean"
         },
         "rejectJwtWithNoneAlg": {
             "id": "rejectJwtWithNoneAlg",
             "description": "Boolean value specifying whether reject JWT requested or validated with algorithm None. Default value is true.",
             "type": "boolean"
         },
        "forceIdTokenHintPrecense": {
            "id": "forceIdTokenHintPrecense",
            "description": "Boolean value specifying whether force id_token_hint parameter precense (false by default)",
            "type": "boolean"
        },
        "forceOfflineAccessScopeToEnableRefreshToken": {
            "id": "forceOfflineAccessScopeToEnableRefreshToken",
            "description": "Boolean value specifying whether force offline_access scope to enable refresh_token grant type. Default value is true.",
            "type": "boolean"
        },
        "errorReasonEnabled": {
            "id": "errorReasonEnabled",
            "description": "Boolean value specifying whether to return detailed reason of the error from AS. Default value is false.",
            "type": "boolean"
        },
        "removeRefreshTokensForClientOnLogout": {
            "id": "removeRefreshTokensForClientOnLogout",
            "description": "Boolean value specifying whether to remove refresh tokens on logout. Default value is true.",
            "type": "boolean"
        },
        "spontaneousScopeLifetime": {
            "id": "spontaneousScopeLifetime",
            "description": "The lifetime of spontaneous scope in seconds.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "configurationUpdateInterval": {
            "id": "configurationUpdateInterval",
            "description": "The interval for configuration update in seconds.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "cssLocation": {
            "id": "cssLocation",
            "description": "The location for CSS files.",
            "type": "string",
            "minLength": 1
        },
        "jsLocation": {
            "id": "jsLocation",
            "description": "The location for JavaScript files.",
            "type": "string",
            "minLength": 1
        },
        "imgLocation": {
            "id": "imgLocation",
            "description": "The location for image files.",
            "type": "string",
            "minLength": 1
        },
        "metricReporterInterval": {
            "id": "metricReporterInterval",
            "description": "The interval for metric reporter in seconds.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "metricReporterKeepDataDays": {
            "id": "metricReporterKeepDataDays",
            "description": "The days to keep metric reported data.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "metricReporterEnabled": {
            "id": "metricReporterEnabled",
            "description": "Boolean value specifying whether to enable Metric Reporter.",
            "type": "boolean"
        },
        "statEnabled": {
            "id": "statEnabled",
            "description": "Boolean value specifying whether to enable statistic.",
            "type": "boolean"
        },
        "statTimerIntervalInSeconds": {
            "id": "statTimerIntervalInSeconds",
            "description": "Interval in seconds which specifies how often statistic timer should run.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "statWebServiceIntervalLimitInSeconds": {
            "id": "statWebServiceIntervalLimitInSeconds",
            "description": "Interval in seconds which specifies limit before statistic web service can handle next call. Protection from calling expensive service too often.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "statNodeId": {
            "id": "statNodeId",
            "description": "Statistic node ID. It has to be any valid string which is unique and does not change over time. (e.g. UUID)",
            "type": "string",
            "minLength": 3
        },
        "pairwiseIdType": {
            "id": "pairwiseIdType",
            "description": "The pairwise ID type.",
            "type": "string",
            "enum": [
                "persistent",
                "algorithmic"
            ]
        },
        "pairwiseCalculationKey": {
            "id": "pairwiseCalculationKey",
            "description": "Key to calculate algorithmic pairwise IDs.",
            "type": "string",
            "minLength": 1
        },
        "pairwiseCalculationSalt": {
            "id": "pairwiseCalculationSalt",
            "description": "Salt to calculate algorithmic pairwise IDs.",
            "type": "string",
            "minLength": 1
        },
        "shareSubjectIdBetweenClientsWithSameSectorId": {
            "id": "shareSubjectIdBetweenClientsWithSameSectorId",
            "description": "Share Subject ID between clients with same Sector ID.",
            "type": "boolean"
        },
        "subjectIdentifierBasedOnWholeUriBackwardCompatibility": {
            "id": "subjectIdentifierBasedOnWholeUriBackwardCompatibility",
            "description": "Use for subject identifier whole uri instead of host (deprecated and will be removed in 5.0)",
            "type": "boolean"
        },
        "webKeysStorage": {
            "id": "webKeysStorage",
            "description": "Web Key Storage Type.",
            "type": "string",
            "enum": [
                "keystore",
                "pkcs11"
            ]
        },
        "dnName": {
            "id": "dnName",
            "description": "DN of certificate issuer.",
            "type": "string",
            "minLength": 1
        },
        "keyStoreFile": {
            "id": "keyStoreFile",
            "description": "The Key Store File (JKS).",
            "type": "string",
            "minLength": 1
        },
        "keyStoreSecret": {
            "id": "keyStoreSecret",
            "description": "The password of the Key Store.",
            "type": "string",
            "minLength": 1
        },
        "keySelectionStrategy": {
            "id": "keySelectionStrategy",
            "description": "Key selection strategy.",
            "type": "string",
            "format": "select",
            "enum": [
                "OLDER",
                "NEWER",
                "FIRST"
            ]
        },
        "keyAlgsAllowedForGeneration": {
            "id": "keyAlgsAllowedForGeneration",
            "description": "If it's empty then all keys are generated. If it's set then only keys with algorithms contained in the property are generated. Possible values: RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512, RSA1_5, RSA-OAEP",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
         },
        "endSessionWithAccessToken": {
            "id": "endSessionWithAccessToken",
            "description": "Accept access token to call end_session endpoint.",
            "type": "boolean"
        },
        "сookieDomain": {
            "id": "сookieDomain",
            "description": "Cookie Domain (sets domain for all cookies created by OP)",
            "type": "string",
            "minLength": 1
        },
        "clientWhiteList": {
            "id": "clientWhiteList",
            "description": "White List for Client Redirection URIs.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "clientBlackList": {
            "id": "clientBlackList",
            "description": "Black List for Client Redirection URIs.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "legacyIdTokenClaims": {
            "id": "legacyIdTokenClaims",
            "description": "Include Claims in ID Token.",
            "type": "boolean"
        },
        "customHeadersWithAuthorizationResponse": {
            "id": "customHeadersWithAuthorizationResponse",
            "description": "Boolean value specifying whether to enable Custom Response Header parameter to return custom headers with the Authorization Response.",
            "type": "boolean"
        },
        "frontChannelLogoutSessionSupported": {
        	"id": "frontChannelLogoutSessionSupported",
            "description": "Boolean value to specify support for front channel logout session.",
            "type": "boolean"
        },
        "useCacheForAllImplicitFlowObjects": {
            "id": "useCacheForAllImplicitFlowObjects",
            "description": "Boolean value to specify whether to persist all objects into cache during Implicit Flow.",
            "type": "boolean"
        },
        "invalidateSessionCookiesAfterAuthorizationFlow": {
            "id": "invalidateSessionCookiesAfterAuthorizationFlow",
            "description": "Boolean value to specify whether to invalidate `session_id` and `consent_session_id` cookies right after successful or unsuccessful authorization",
            "type": "boolean"
        },
        "allowAuthorizationByAccessToken": {
            "id": "allowAuthorizationByAccessToken",
            "description": "DEPRECATED. Boolean value to specify whether to allow authorization by `access_token` at Authorization Endpoint. It will be removed in CE 4.0",
            "type": "boolean"
        },
        "updateUserLastLogonTime": {
        	"id": "updateUserLastLogonTime",
            "description": "Boolean value to specify if application should update oxLastLogonTime attribute on user authentication.",
            "type": "boolean"
        },
        "updateClientAccessTime": {
        	"id": "updateClientAccessTime",
            "description": "Boolean value to specify if application should update oxLastAccessTime/oxLastLogonTime attributes on client authentication.",
            "type": "boolean"
        },
        "enableClientGrantTypeUpdate": {
        	"id": "enableClientGrantTypeUpdate",
            "description": "Boolean value to specify if client can update Grant Type values.",
            "type": "boolean"
        },
        "loggingLevel": {
            "id": "loggingLevel",
            "description": "Logging level for oxAuth logers.",
            "type": "string",
            "format": "select",
            "enum": [
                "TRACE",
                "DEBUG",
                "INFO",
                "WARN",
                "ERROR",
                "FATAL",
                "OFF"
            ]
        },
        "loggingLayout": {
            "id": "loggingLayout",
            "description": "Logging layout used for oxAuth loggers.",
            "type": "string",
            "format": "select",
            "enum": [
                "text",
                "json"
            ]
        },
        "corsConfigurationFilters": {
            "id": "corsConfigurationFilters",
            "description": "CORS Configuration filters.",
            "type": "array",
            "minItems": 1,
            "uniqueItems": false,
            "additionalItems": true,
            "items": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                    "filterName": {
                        "id": "filterName",
                        "description": "",
                        "type": "string",
                        "minLength": 1
                    },
                    "corsEnabled": {
                        "id": "corsEnabled",
                        "description": "",
                        "type": "boolean"
                    },
                    "corsAllowedOrigins": {
                        "id": "corsAllowedOrigins",
                        "description": "",
                        "type": "string",
                        "minLength": 1
                    },
                    "corsAllowedMethods": {
                        "id": "corsAllowedMethods",
                        "description": "",
                        "type": "string",
                        "minLength": 1
                    },
                    "corsAllowedHeaders": {
                        "id": "corsAllowedHeaders",
                        "description": "",
                        "type": "string",
                        "minLength": 1
                    },
                    "corsExposedHeaders": {
                        "id": "corsExposedHeaders",
                        "description": "",
                        "type": "string",
                        "minLength": 1
                    },
                    "corsSupportCredentials": {
                        "id": "corsSupportCredentials",
                        "description": "",
                        "type": "boolean"
                    },
                    "corsLoggingEnabled": {
                        "id": "corsLoggingEnabled",
                        "description": "",
                        "type": "boolean"
                    },
                    "corsPreflightMaxAge": {
                        "id": "corsPreflightMaxAge",
                        "description": "",
                        "type": "integer",
                        "multipleOf": 1,
                        "maximum": 2147483647,
                        "minimum": 1,
                        "exclusiveMaximum": false,
                        "exclusiveMinimum": false
                    },
                    "corsRequestDecorate": {
                        "id": "corsRequestDecorate",
                        "description": "",
                        "type": "boolean"
                    }
                }
            }
        },
        "logClientIdOnClientAuthentication": {
            "id": "logClientIdOnClientAuthentication",
            "description": "Boolean value to specify if application should log the Client ID on client authentication.",
            "type": "boolean"
        },
        "logClientNameOnClientAuthentication": {
            "id": "logClientNameOnClientAuthentication",
            "description": "Boolean value to specify if application should log the Client Name on client authentication.",
            "type": "boolean"
        },
        "authorizationRequestCustomAllowedParameters": {
            "id": "authorizationRequestCustomAllowedParameters",
            "description": "Authorization Request Custom Allowed Parameters.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "legacyDynamicRegistrationScopeParam": {
            "id": "legacyDynamicRegistrationScopeParam",
            "description": "Legacy Dynamic Registration Scopes JSON Array Param.",
            "type": "boolean"
        },
        "openidScopeBackwardCompatibility": {
            "id": "openidScopeBackwardCompatibility",
            "description": "Set to false to only allow token endpoint request for openid scope with grant type equals to authorization_code, restrict access to userinfo to scope openid and only return id_token if scope contains openid.",
            "type": "boolean"
        },
        "skipAuthorizationForOpenIdScopeAndPairwiseId": {
            "id": "skipAuthorizationForOpenIdScopeAndPairwiseId",
            "description": "If a client has only openid scope and pairwise id, person should not have to authorize.",
            "type": "boolean"
        },
        "allowPostLogoutRedirectWithoutValidation": {
            "id": "allowPostLogoutRedirectWithoutValidation",
            "description": "Allows post logout redirect without validation for End Session Endpoint.",
            "type": "boolean"
        },
        "httpLoggingEnabled": {
            "id": "httpLoggingEnabled",
            "description": "Enable/Disable request/response logging filter",
            "type": "boolean"
        },
        "httpLoggingExludePaths": {
            "id": "httpLoggingExludePaths",
            "description": "List of base URI for which request/response logging filter should not record activity.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "externalLoggerConfiguration": {
            "id": "externalLoggerConfiguration",
            "description": "Path to external log4j2 logging configuration.",
            "type": "string",
            "minLength": 1
        },
        "disableU2fEndpoint": {
            "id": "disableU2fEndpoint",
            "description": "Enable/Disable U2F endpoints.",
            "type": "boolean"
        },
        "disableJdkLogger": {
            "id": "disableJdkLogger",
            "description": "Boolean value specifying whether to enable JDK Loggers.",
            "type": "boolean"
        },
        "jmsUserName": {
            "id": "jmsUserName",
            "description": "JMS UserName.",
            "type": "string",
            "minLength": 1
        },
        "jmsPassword": {
            "id": "jmsPassword",
            "description": "JMS Password.",
            "type": "string",
            "minLength": 1
        },
        "jmsBrokerURISet": {
            "id": "jmsBrokerURISet",
            "description": "JMS Broker URI Set.",
            "type": "array",
            "format": "select"
        },
        "oxElevenTestModeToken": {
            "id": "oxElevenTestModeToken",
            "description": "oxEleven Test Mode Token.",
            "type": "string",
            "minLength": 1
        },
        "enabledOAuthAuditLogging": {
            "id": "enabledOAuthAuditLogging",
            "description": "enabled OAuth Audit Logging.",
            "type": "boolean"
        },
        "authenticationProtectionConfiguration": {
            "id": "authenticationProtectionConfiguration",
            "description": "Authentication Brute Force Protection Configuration.",
            "type": "object",
            "properties": {
                "attemptExpiration": {
                    "id": "attemptExpiration",
                    "type": "integer",
                    "multipleOf": 1,
                    "maximum": 2147483647,
                    "minimum": 1,
                    "exclusiveMaximum": false,
                    "exclusiveMinimum": false
                },
                "maximumAllowedAttemptsWithoutDelay": {
                    "id": "maximumAllowedAttemptsWithoutDelay",
                    "type": "integer",
                    "multipleOf": 1,
                    "maximum": 2147483647,
                    "minimum": 1,
                    "exclusiveMaximum": false,
                    "exclusiveMinimum": false
                },
                "delayTime": {
                    "id": "delayTime",
                    "type": "integer",
                    "multipleOf": 1,
                    "maximum": 2147483647,
                    "minimum": 1,
                    "exclusiveMaximum": false,
                    "exclusiveMinimum": false
                },
                "bruteForceProtectionEnabled": {
                    "id": "bruteForceProtectionEnabled",
                    "type": "boolean"
                }
            }
        },
        "errorHandlingMethod": {
            "id": "errorHandlingMethod",
            "description": "A list of possible error handling methods.",
            "type": "string",
            "enum": [
                "internal",
                "remote"
            ]
        },
        "useLocalCache": {
            "id": "useLocalCache",
            "description": "Boolean value specifying whether to enable local in-memory cache for attributes, scopes, clients and organization configuration.",
            "type": "boolean"
        },
        "jwksAlgorithmsSupported": {
            "id": "jwksAlgorithmsSupported",
            "description": "A list of algorithms that will be used in JWKS endpoint.",
            "type": "array",
            "format": "select",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "RS256",
                    "RS384",
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512",
                    "RSA1_5",
                    "RSA-OAEP"
                ]
            }
        },
        "discoveryCacheLifetimeInMinutes": {
            "id": "discoveryCacheLifetimeInMinutes",
            "description": "Lifetime of discovery cache.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "sectorIdentifierCacheLifetimeInMinutes": {
            "id": "sectorIdentifierCacheLifetimeInMinutes",
            "description": "Lifetime of sector identifier redirect uri's cache.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "keepAuthenticatorAttributesOnAcrChange": {
            "id": "keepAuthenticatorAttributesOnAcrChange",
            "description": "Boolean value specifying whether to keep authenticator attributes on ACR change.",
            "type": "boolean"
        },
        "backchannelAuthenticationEndpoint": {
            "id": "backchannelAuthenticationEndpoint",
            "description": "Backchannel Authentication Endpoint",
            "type": "string",
            "minLength": 0
        },
        "backchannelDeviceRegistrationEndpoint": {
            "id": "backchannelDeviceRegistrationEndpoint",
            "description": "Backchannel Device Registration Endpoint",
            "type": "string",
            "minLength": 0
        },
        "backchannelTokenDeliveryModesSupported": {
            "id": "backchannelTokenDeliveryModesSupported",
            "description": "Backchannel Token Delivery Modes Supported.",
            "type": "array",
            "format": "select",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "poll",
                    "ping",
                    "push"
                ]
            }
        },
        "backchannelAuthenticationRequestSigningAlgValuesSupported": {
            "id": "backchannelAuthenticationRequestSigningAlgValuesSupported",
            "description": "Backchannel Authentication Request Signing Alg Values Supported.",
            "type": "array",
            "format": "select",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "RS512",
                    "ES256",
                    "ES384",
                    "ES512",
                    "PS256",
                    "PS384",
                    "PS512"
                ]
            }
        },
        "backchannelClientId": {
            "id": "backchannelClientId",
            "description": "Backchannel Client Id",
            "type": "string",
            "minLength": 0
        },
        "backchannelRedirectUri": {
            "id": "backchannelRedirectUri",
            "description": "Backchannel Redirect Uri",
            "type": "string",
            "minLength": 0
        },
        "backchannelUserCodeParameterSupported": {
            "id": "backchannelUserCodeParameterSupported",
            "description": "Backchannel User Code Parameter Supported",
            "type": "boolean"
        },
        "backchannelBindingMessagePattern": {
            "id": "backchannelBindingMessagePattern",
            "description": "Backchannel Binding Message Pattern",
            "type": "string",
            "minLength": 0
        },
        "backchannelAuthenticationResponseExpiresIn": {
            "id": "backchannelAuthenticationResponseExpiresIn",
            "description": "Backchannel Authentication Response Expires In",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "backchannelAuthenticationResponseInterval": {
            "id": "backchannelAuthenticationResponseInterval",
            "description": "Backchannel Authentication Response Interval",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "backchannelLoginHintClaims": {
            "id": "backchannelLoginHintClaims",
            "description": "Backchannel Login Hint Claims",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "additionalItems": true,
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "cibaEnabled": {
            "id": "cibaEnabled",
            "description": "Boolean value specifying whether turn on CIBA. If true AS will process CIBA requests.",
            "type": "boolean"
        },
        "cibaEndUserNotificationConfig": {
            "id": "cibaEndUserNotificationConfig",
            "description": "CIBA End User Notification Config",
            "type": "object",
            "properties": {
                "apiKey": {
                    "id": "apiKey",
                    "description": "API Key",
                    "type": "string",
                    "minLength": 1
                },
                "authDomain": {
                    "id": "authDomain",
                    "description": "Auth Domain",
                    "type": "string",
                    "minLength": 1
                },
                "databaseURL": {
                    "id": "databaseURL",
                    "description": "Database URL",
                    "type": "string",
                    "minLength": 1
                },
                "projectId": {
                    "id": "projectId",
                    "description": "Project ID",
                    "type": "string",
                    "minLength": 1
                },
                "storageBucket": {
                    "id": "storageBucket",
                    "description": "Storage Bucket",
                    "type": "string",
                    "minLength": 1
                },
                "messagingSenderId": {
                    "id": "messagingSenderId",
                    "description": "Messaging Sender ID",
                    "type": "string",
                    "minLength": 1
                },
                "appId": {
                    "id": "appId",
                    "description": "App ID",
                    "type": "string",
                    "minLength": 1
                },
                "notificationUrl": {
                    "id": "notificationUrl",
                    "description": "Notification URL",
                    "type": "string",
                    "minLength": 1
                },
                "notificationKey": {
                    "id": "notificationKey",
                    "description": "Notification Key",
                    "type": "string",
                    "minLength": 1
                },
                "publicVapidKey": {
                    "id": "publicVapidKey",
                    "description": "Public Vapid Key",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "deviceAuthzRequestExpiresIn": {
            "id": "deviceAuthzRequestExpiresIn",
            "description": "Expiration time given for device authorization requests",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 2147483647,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "deviceAuthzTokenPollInterval": {
            "id": "deviceAuthzTokenPollInterval",
            "description": "Default interval returned to the client to process device token requests.",
            "type": "integer",
            "multipleOf": 1,
            "maximum": 3600,
            "minimum": 1,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false
        },
        "deviceAuthzResponseTypeToProcessAuthz": {
            "id": "deviceAuthzResponseTypeToProcessAuthz",
            "description": "Response type used to process device authz requests",
            "type": "string",
            "minLength": 0
        },
        "skipAuthenticationFilterOptionsMethod": {
            "id": "skipAuthenticationFilterOptionsMethod",
            "description": "Specifies whether to process OPTIONS rerquests in Authentication Filter or not",
            "type": "boolean"
        },"allowWildcardRedirectUri": {
            "id": "allowWildcardRedirectUri",
            "description": "Specifies whether to allow wildcard in redirect URI or not.",
            "type": "boolean"
        }
    },
    "required": [
        "issuer",
        "baseEndpoint",
        "authorizationEndpoint",
        "tokenEndpoint",
        "tokenRevocationEndpoint",
        "userInfoEndpoint",
        "clientInfoEndpoint",
        "checkSessionIFrame",
        "endSessionEndpoint",
        "jwksUri",
        "registrationEndpoint",
        "openIdDiscoveryEndpoint",
        "openIdConfigurationEndpoint",
        "idGenerationEndpoint",
        "introspectionEndpoint",
        "deviceAuthzEndpoint",
        "umaConfigurationEndpoint",
        "sectorIdentifierEndpoint",
        "oxElevenGenerateKeyEndpoint",
        "oxElevenSignEndpoint",
        "oxElevenVerifySignatureEndpoint",
        "oxElevenDeleteKeyEndpoint",
        "oxElevenJwksEndpoint",
        "openidSubAttribute",
        "responseTypesSupported",
        "responseModesSupported",
        "grantTypesSupported",
        "dynamicGrantTypeDefault",
        "subjectTypesSupported",
        "defaultSubjectType",
        "softwareStatementValidationType",
        "softwareStatementValidationClaimName",
        "userInfoSigningAlgValuesSupported",
        "userInfoEncryptionAlgValuesSupported",
        "userInfoEncryptionEncValuesSupported",
        "idTokenSigningAlgValuesSupported",
        "idTokenEncryptionAlgValuesSupported",
        "idTokenEncryptionEncValuesSupported",
        "requestObjectSigningAlgValuesSupported",
        "requestObjectEncryptionAlgValuesSupported",
        "requestObjectEncryptionEncValuesSupported",
        "tokenEndpointAuthMethodsSupported",
        "tokenEndpointAuthSigningAlgValuesSupported",
        "dynamicRegistrationCustomAttributes",
        "displayValuesSupported",
        "claimTypesSupported",
        "serviceDocumentation",
        "claimsLocalesSupported",
        "uiLocalesSupported",
        "claimsParameterSupported",
        "requestParameterSupported",
        "requestUriParameterSupported",
        "requireRequestUriRegistration",
        "opPolicyUri",
        "opTosUri",
        "authorizationCodeLifetime",
        "refreshTokenLifetime",
        "idTokenLifetime",
        "accessTokenLifetime",
        "umaRptLifetime",
        "umaPctLifetime",
        "umaAddScopesAutomatically",
        "umaKeepClientDuringResourceSetRegistration",
        "cleanServiceInterval",
        "cleanServiceBatchChunkSize",
        "keyRegenerationEnabled",
        "keyRegenerationInterval",
        "defaultSignatureAlgorithm",
        "oxOpenIdConnectVersion",
        "oxId",
        "dynamicRegistrationEnabled",
        "dynamicRegistrationExpirationTime",
        "dynamicRegistrationPersistClientAuthorizations",
        "trustedClientEnabled",
        "dynamicRegistrationScopesParamEnabled",
        "dynamicRegistrationCustomObjectClass",
        "personCustomObjectClassList",
        "authenticationFiltersEnabled",
        "clientAuthenticationFiltersEnabled",
        "clientRegDefaultToCodeFlowWithRefresh",
        "authenticationFilters",
        "clientAuthenticationFilters",
        "sessionIdUnusedLifetime",
        "sessionIdUnauthenticatedUnusedLifetime",
        "sessionIdPersistOnPromptNone",
        "sessionIdLifetime",
        "configurationUpdateInterval",
        "cssLocation",
        "jsLocation",
        "imgLocation",
        "metricReporterInterval",
        "metricReporterKeepDataDays",
        "metricReporterEnabled",
        "pairwiseIdType",
        "pairwiseCalculationKey",
        "pairwiseCalculationSalt",
        "shareSubjectIdBetweenClientsWithSameSectorId",
        "webKeysStorage",
        "dnName",
        "keyStoreFile",
        "keyStoreSecret",
        "endSessionWithAccessToken",
        "legacyIdTokenClaims",
        "customHeadersWithAuthorizationResponse",
        "frontChannelLogoutSessionSupported",
        "updateUserLastLogonTime",
        "updateClientAccessTime",
        "enableClientGrantTypeUpdate",
        "loggingLevel",
        "loggingLayout",
        "disableJdkLogger",
        "corsConfigurationFilters",
        "logClientIdOnClientAuthentication",
        "logClientNameOnClientAuthentication",
        "authorizationRequestCustomAllowedParameters",
        "legacyDynamicRegistrationScopeParam",
        "openidScopeBackwardCompatibility",
        "skipAuthorizationForOpenIdScopeAndPairwiseId",
        "httpLoggingEnabled",
        "httpLoggingExludePaths",
        "externalLoggerConfiguration",
        "disableU2fEndpoint",
        "authenticationProtectionConfiguration",
        "errorHandlingMethod",
        "oxElevenTestModeToken",
        "enabledOAuthAuditLogging",
        "jmsBrokerURISet",
        "jmsUserName",
        "jmsPassword",
        "useLocalCache",
        "jwksAlgorithmsSupported",
        "keepAuthenticatorAttributesOnAcrChange",
        "backchannelAuthenticationEndpoint",
        "backchannelAuthenticationEndpoint",
        "backchannelTokenDeliveryModesSupported",
        "backchannelAuthenticationRequestSigningAlgValuesSupported",
        "backchannelClientId",
        "backchannelRedirectUri",
        "backchannelUserCodeParameterSupported",
        "backchannelBindingMessagePattern",
        "backchannelAuthenticationResponseExpiresIn",
        "backchannelAuthenticationResponseInterval",
        "backchannelLoginHintClaims",
        "cibaEnabled",
        "cibaEndUserNotificationConfig",
        "deviceAuthzRequestExpiresIn",
        "deviceAuthzTokenPollInterval",
        "deviceAuthzResponseTypeToProcessAuthz",
        "skipAuthenticationFilterOptionsMethod"
    ]
}
