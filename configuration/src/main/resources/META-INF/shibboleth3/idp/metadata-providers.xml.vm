<?xml version="1.0" encoding="UTF-8"?>
<MetadataProvider id="ShibbolethMetadata" xsi:type="ChainingMetadataProvider"
    xmlns="urn:mace:shibboleth:2.0:metadata"
    xmlns:security="urn:mace:shibboleth:2.0:security"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport"
    xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
    xmlns:ds11="http://www.w3.org/2009/xmldsig11#"
    xmlns:enc="http://www.w3.org/2001/04/xmlenc#"
    xmlns:enc11="http://www.w3.org/2009/xmlenc11#"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
                        urn:oasis:names:tc:SAML:2.0:assertion http://docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd
                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd
                        urn:oasis:names:tc:SAML:metadata:algsupport http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-metadata-algsupport-v1.0.xsd
                        http://www.w3.org/2000/09/xmldsig# http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd
                        http://www.w3.org/2009/xmldsig11# http://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/xmldsig11-schema.xsd
                        http://www.w3.org/2001/04/xmlenc# http://www.w3.org/TR/xmlenc-core/xenc-schema.xsd
                        http://www.w3.org/2009/xmlenc11# http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/xenc-schema-11.xsd">

    <!--
    Below you place the mechanisms which define how to load the metadata for SP(s) you will
    provide service to.
    
    Some simple examples are provided. The documentation provides more details; in most cases,
    the modern replacement for these older plugins are the "DynamicHTTPMetadataProvider" and
    "LocalDynamic" variants, which provide dramatic memory savings and more reliable operation.
     
    NOTE: You do NOT need to load metadata for this IdP itself within this configuration.
    -->

#foreach( $trustRelationship in $trustParams.trusts )
    #if($trustRelationship.isFileMetadataSourceType())

    <MetadataProvider id="SiteSP$trustParams.trustIds.get($trustRelationship.inum)"
                      xsi:type="FilesystemMetadataProvider"
                      metadataFile="$medataFolder$trustRelationship.spMetaDataFN">

    #elseif($trustRelationship.isUriMetadataSourceType())

    <MetadataProvider id="SiteSP$trustParams.trustIds.get($trustRelationship.inum)"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      maxRefreshDelay="$trustRelationship.maxRefreshDelay"
                      metadataURL="$trustRelationship.spMetaDataURL"
                      backingFile="$medataFolder$trustRelationship.spMetaDataFN">
    
    #elseif($trustRelationship.isMdqMetadataSourceType() and $trustRelationship.entityTypeIsFederation())
    <MetadataProvider id="SiteSP$trustParams.trustIds.get($trustRelationship.inum)"
                    xsi:type="DynamicHTTPMetadataProvider" connectionRequestTimeout="PT0S"
                    connectionTimeout="PT0S" socketTimeout="PT0S">
        
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P1D"/>
        <MetadataQueryProtocol>$trustRelationship.url</MetadataQueryProtocol>
    
    #end

    #if( $trustRelationship.gluuSAMLMetaDataFilter and $trustRelationship.getGluuSAMLMetaDataFilter().size() > 0 )

        <MetadataFilter xsi:type="ChainingFilter" xmlns="urn:mace:shibboleth:2.0:metadata">
        #foreach( $filter in $trustRelationship.getGluuSAMLMetaDataFilter() )
            $filter
        #end
        </MetadataFilter>

    #end

    #if($trustRelationship.isFileMetadataSourceType() or $trustRelationship.isUriMetadataSourceType())
    </MetadataProvider>
    #end
    #if($trustRelationship.isMdqMetadataSourceType() and $trustRelationship.entityTypeIsFederation())
    </MetadataProvider>
    #end
#end
</MetadataProvider>
